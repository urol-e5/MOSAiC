---
title: "MOSAiC Physiology Data"
format: html
execute:
  warning: false
  message: false
---

## Interactive Physiology Data Explorer

This page provides interactive visualization and exploration of physiology data from the MOSAiC timeseries study, including metabolomics, lipidomics, and physiological measurements across four timepoints.

```{r setup}
#| echo: false
#| message: false
#| warning: false
#| cache: false
# Ensure required packages are installed & loaded. Labeling this chunk 'setup' guarantees
# it's executed before other chunks so that %>% (from magrittr/dplyr) is available.
pkgs <- c("vroom", "dplyr", "tidyr", "plotly", "DT", "stringr", "readr", "magrittr", "htmltools")
new <- setdiff(pkgs, rownames(installed.packages()))
if (length(new)) install.packages(new)

invisible(lapply(pkgs, require, character.only = TRUE))

# Explicitly attach magrittr to avoid '%>%' not found errors in some rendering contexts
library(magrittr)

# Read metabolomics data with error handling
metabolomics_url <- "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/main/M-multi-species/output/metabolomics_count_matrix.csv"
metabolomics <- tryCatch({
  data <- vroom::vroom(metabolomics_url, col_types = cols(.default = "d", X1 = "c"), progress = FALSE)
  names(data)[1] <- "compound"
  data
}, error = function(e) {
  warning("Failed to load metabolomics data: ", e$message)
  data.frame(compound = character(0))
})

# Ensure compound names are not empty or missing
metabolomics <- metabolomics %>%
  filter(!is.na(compound) & compound != "" & compound != "NA")

# Read lipidomics data with error handling
lipidomics_url <- "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/main/M-multi-species/output/lipid_count_matrix.csv"
lipidomics <- tryCatch({
  data <- vroom::vroom(lipidomics_url, col_types = cols(.default = "d", X1 = "c"), progress = FALSE)
  names(data)[1] <- "lipid"
  data
}, error = function(e) {
  warning("Failed to load lipidomics data: ", e$message)
  data.frame(lipid = character(0))
})

# Ensure lipid names are not empty or missing
lipidomics <- lipidomics %>%
  filter(!is.na(lipid) & lipid != "" & lipid != "NA")

# Read physiology data
physiology_url <- "https://raw.githubusercontent.com/urol-e5/timeseries/master/time_series_analysis/Output/master_timeseries.csv"
physiology <- vroom::vroom(physiology_url, progress = FALSE)

# Clean and process data
# Extract sample information from column names for metabolomics
metabolomics_long <- if (nrow(metabolomics) > 0) {
  metabolomics %>%
    pivot_longer(cols = -compound, names_to = "sample_id", values_to = "value") %>%
    filter(!is.na(value)) %>%
    mutate(
      species = case_when(
        str_detect(sample_id, "^ACR") ~ "Acropora pulchra",
        str_detect(sample_id, "^POR") ~ "Porites evermanni", 
        str_detect(sample_id, "^POC") ~ "Pocillopora tuahiniensis",
        TRUE ~ "Unknown"
      ),
      timepoint = str_extract(sample_id, "TP[1-4]"),
      colony_id = str_extract(sample_id, "^[A-Z]+-[0-9]+")
    ) %>%
    filter(species != "Unknown")
} else {
  # Create empty data frame with proper column structure
  data.frame(
    compound = character(0),
    sample_id = character(0),
    value = numeric(0),
    species = character(0),
    timepoint = character(0),
    colony_id = character(0)
  )
}

# Extract sample information from column names for lipidomics
lipidomics_long <- if (nrow(lipidomics) > 0) {
  lipidomics %>%
    pivot_longer(cols = -lipid, names_to = "sample_id", values_to = "value") %>%
    filter(!is.na(value)) %>%
    mutate(
      species = case_when(
        str_detect(sample_id, "^ACR") ~ "Acropora pulchra",
        str_detect(sample_id, "^POR") ~ "Porites evermanni", 
        str_detect(sample_id, "^POC") ~ "Pocillopora tuahiniensis",
        TRUE ~ "Unknown"
      ),
      timepoint = str_extract(sample_id, "TP[1-4]"),
      colony_id = str_extract(sample_id, "^[A-Z]+-[0-9]+")
    ) %>%
    filter(species != "Unknown")
} else {
  # Create empty data frame with proper column structure
  data.frame(
    lipid = character(0),
    sample_id = character(0),
    value = numeric(0),
    species = character(0),
    timepoint = character(0),
    colony_id = character(0)
  )
}

# Process physiology data
physiology_clean <- physiology %>%
  filter(!is.na(timepoint)) %>%
  mutate(
    timepoint = case_when(
      timepoint == "timepoint1" ~ "TP1",
      timepoint == "timepoint2" ~ "TP2", 
      timepoint == "timepoint3" ~ "TP3",
      timepoint == "timepoint4" ~ "TP4",
      TRUE ~ timepoint
    ),
    species = case_when(
      species == "Acropora" ~ "Acropora pulchra",
      species == "Porites" ~ "Porites evermanni",
      species == "Pocillopora" ~ "Pocillopora tuahiniensis",
      TRUE ~ species
    )
  )
```

## Metabolomics Data

### Interactive Metabolomics Table

Explore metabolomics data with search and filtering capabilities:

```{r}
#| echo: false
# Create summary table for metabolomics
if (nrow(metabolomics_long) > 0) {
  metabolomics_summary <- metabolomics_long %>%
    group_by(compound, species, timepoint) %>%
    summarise(
      mean_value = round(mean(value, na.rm = TRUE), 2),
      sd_value = round(sd(value, na.rm = TRUE), 2),
      n_samples = n(),
      .groups = "drop"
    ) %>%
    arrange(compound, species, timepoint)

  DT::datatable(
    metabolomics_summary,
    filter = "top",
    extensions = c("Buttons", "Scroller"),
    options = list(
      dom = "Bfrtip",
      buttons = c("copy", "csv", "excel"),
      pageLength = 25,
      deferRender = TRUE,
      scrollY = 500,
      scroller = TRUE,
      autoWidth = TRUE
    ),
    caption = "Metabolomics data summary by compound, species, and timepoint"
  ) %>%
    DT::formatRound(columns = c("mean_value", "sd_value"), digits = 2)
} else {
  htmltools::div(
    style = "padding: 20px; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;",
    htmltools::h4("No Metabolomics Data Available", style = "color: #6c757d; margin-bottom: 10px;"),
    htmltools::p("The metabolomics dataset could not be loaded or contains no valid data. Please check the data source or try again later.", style = "color: #6c757d; margin: 0;")
  )
}
```

### Metabolomics Time Series Plots

Select compounds to visualize across timepoints:

```{r}
#| echo: false
# Get all available compounds sorted alphabetically  
all_compounds <- sort(unique(metabolomics_long$compound))

# Check if compounds are available
if (length(all_compounds) > 0) {
  # Create a searchable dropdown for compound selection using DT
  compound_selector <- DT::datatable(
    data.frame(
      Compound = all_compounds,
      Select = paste0('<input type="checkbox" id="compound_', seq_along(all_compounds), '" value="', all_compounds, '">')
    ),
    escape = FALSE,
    filter = "top",
    options = list(
      pageLength = 10,
      dom = "ftip",
      columnDefs = list(
        list(targets = 1, orderable = FALSE, width = "60px")
      )
    ),
    caption = "Search and select compounds to plot (use the search box above)"
  )
  
  compound_selector
} else {
  # Display message when no compounds are available
  htmltools::div(
    style = "padding: 20px; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;",
    htmltools::h4("No Metabolomics Data Available", style = "color: #6c757d; margin-bottom: 10px;"),
    htmltools::p("The metabolomics dataset could not be loaded or contains no valid compounds. Please check the data source or try again later.", style = "color: #6c757d; margin: 0;")
  )
}
```

#### Individual Compound Time Series Plot

```{r}
#| echo: false
# Create a plot for the top 5 most variable compounds as default
top_compounds <- metabolomics_long %>%
  group_by(compound) %>%
  summarise(cv = sd(value, na.rm = TRUE) / mean(value, na.rm = TRUE), .groups = "drop") %>%
  arrange(desc(cv)) %>%
  slice_head(n = 5) %>%
  pull(compound)

metabolomics_plot_data <- metabolomics_long %>%
  filter(compound %in% top_compounds) %>%
  group_by(compound, species, timepoint) %>%
  summarise(
    mean_value = mean(value, na.rm = TRUE),
    se_value = sd(value, na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  ) %>%
  mutate(timepoint_num = as.numeric(str_extract(timepoint, "[1-4]")))

p_metabolomics <- plot_ly(data = metabolomics_plot_data, 
                         x = ~timepoint_num, 
                         y = ~mean_value,
                         color = ~species,
                         symbol = ~compound,
                         type = "scatter",
                         mode = "lines+markers",
                         line = list(width = 2),
                         marker = list(size = 8),
                         error_y = list(array = ~se_value, color = 'rgba(0,0,0,0.3)'),
                         hovertemplate = paste(
                           "<b>%{fullData.name}</b><br>",
                           "Timepoint: %{x}<br>",
                           "Mean Value: %{y:.2f}<br>",
                           "<extra></extra>"
                         )) %>%
  layout(
    title = "Top 5 Most Variable Metabolomics Compounds Across Timepoints",
    xaxis = list(title = "Timepoint", tickvals = 1:4, ticktext = paste0("TP", 1:4)),
    yaxis = list(title = "Concentration"),
    hovermode = "closest"
  )

p_metabolomics
```

## Lipidomics Data

### Interactive Lipidomics Table

```{r}
#| echo: false
# Create summary table for lipidomics
if (nrow(lipidomics_long) > 0) {
  lipidomics_summary <- lipidomics_long %>%
    group_by(lipid, species, timepoint) %>%
    summarise(
      mean_value = round(mean(value, na.rm = TRUE), 2),
      sd_value = round(sd(value, na.rm = TRUE), 2),
      n_samples = n(),
      .groups = "drop"
    ) %>%
    arrange(lipid, species, timepoint)

  DT::datatable(
    lipidomics_summary,
    filter = "top",
    extensions = c("Buttons", "Scroller"),
    options = list(
      dom = "Bfrtip",
      buttons = c("copy", "csv", "excel"),
      pageLength = 25,
      deferRender = TRUE,
      scrollY = 500,
      scroller = TRUE,
      autoWidth = TRUE
    ),
    caption = "Lipidomics data summary by lipid, species, and timepoint"
  ) %>%
    DT::formatRound(columns = c("mean_value", "sd_value"), digits = 2)
} else {
  htmltools::div(
    style = "padding: 20px; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;",
    htmltools::h4("No Lipidomics Data Available", style = "color: #6c757d; margin-bottom: 10px;"),
    htmltools::p("The lipidomics dataset could not be loaded or contains no valid data. Please check the data source or try again later.", style = "color: #6c757d; margin: 0;")
  )
}
```

### Lipidomics Time Series Plots

```{r}
#| echo: false
# Get all available lipids sorted alphabetically  
all_lipids <- sort(unique(lipidomics_long$lipid))

# Check if lipids are available
if (length(all_lipids) > 0) {
  # Create a searchable dropdown for lipid selection using DT
  lipid_selector <- DT::datatable(
    data.frame(
      Lipid = all_lipids,
      Select = paste0('<input type="checkbox" id="lipid_', seq_along(all_lipids), '" value="', all_lipids, '">')
    ),
    escape = FALSE,
    filter = "top",
    options = list(
      pageLength = 10,
      dom = "ftip",
      columnDefs = list(
        list(targets = 1, orderable = FALSE, width = "60px")
      )
    ),
    caption = "Search and select lipids to plot (use the search box above)"
  )
  
  lipid_selector
} else {
  # Display message when no lipids are available
  htmltools::div(
    style = "padding: 20px; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;",
    htmltools::h4("No Lipidomics Data Available", style = "color: #6c757d; margin-bottom: 10px;"),
    htmltools::p("The lipidomics dataset could not be loaded or contains no valid lipids. Please check the data source or try again later.", style = "color: #6c757d; margin: 0;")
  )
}
```

#### Individual Lipid Time Series Plot

```{r}
#| echo: false
# Create interactive plot for top variable lipids as default
top_lipids <- lipidomics_long %>%
  group_by(lipid) %>%
  summarise(cv = sd(value, na.rm = TRUE) / mean(value, na.rm = TRUE), .groups = "drop") %>%
  arrange(desc(cv)) %>%
  slice_head(n = 5) %>%
  pull(lipid)

lipidomics_plot_data <- lipidomics_long %>%
  filter(lipid %in% top_lipids) %>%
  group_by(lipid, species, timepoint) %>%
  summarise(
    mean_value = mean(value, na.rm = TRUE),
    se_value = sd(value, na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  ) %>%
  mutate(timepoint_num = as.numeric(str_extract(timepoint, "[1-4]")))

p_lipidomics <- plot_ly(data = lipidomics_plot_data, 
                       x = ~timepoint_num, 
                       y = ~mean_value,
                       color = ~species,
                       symbol = ~lipid,
                       type = "scatter",
                       mode = "lines+markers",
                       line = list(width = 2),
                       marker = list(size = 8),
                       error_y = list(array = ~se_value, color = 'rgba(0,0,0,0.3)'),
                       hovertemplate = paste(
                         "<b>%{fullData.name}</b><br>",
                         "Timepoint: %{x}<br>",
                         "Mean Value: %{y:.2f}<br>",
                         "<extra></extra>"
                       )) %>%
  layout(
    title = "Top 5 Most Variable Lipidomics Compounds Across Timepoints",
    xaxis = list(title = "Timepoint", tickvals = 1:4, ticktext = paste0("TP", 1:4)),
    yaxis = list(title = "Concentration"),
    hovermode = "closest"
  )

p_lipidomics
```

## Physiology Data

### Interactive Physiology Table

```{r}
#| echo: false
# Create physiology data table with key measurements
physiology_table <- physiology_clean %>%
  select(any_of(c(
    "colony_id_corr", "timepoint", "species", "site", 
    "Host_AFDW.mg.cm2", "Sym_AFDW.mg.cm2", "Ratio_AFDW.mg.cm2", 
    "Total_Chl", "Total_Chl_cell", "prot_mg.mgafdw", "cells.mgAFDW", 
    "cre.umol.mgafdw", "Am", "AQY", "Rd", "Ik", "Ic", "calc.umol.cm2.hr"
  ))) %>%
  arrange(species, colony_id_corr, timepoint)

DT::datatable(
  physiology_table,
  filter = "top",
  extensions = c("Buttons", "Scroller"),
  options = list(
    dom = "Bfrtip",
    buttons = c("copy", "csv", "excel"),
    pageLength = 25,
    deferRender = TRUE,
    scrollY = 500,
    scroller = TRUE,
    autoWidth = TRUE,
    scrollX = TRUE
  ),
  caption = "Physiology measurements by colony, species, and timepoint"
) %>%
  DT::formatRound(columns = 4:ncol(physiology_table), digits = 3)
```

### Physiology Time Series Plots

```{r}
#| echo: false
#| eval: true
# Key physiology parameters for plotting
key_params <- c("cre.umol.mgprot", "chla.ug.cm2", "cells.cm2", "calc.umol.cm2.hr")
param_labels <- c(
  "cre.umol.mgprot" = "Respiration (μmol/mg protein)",
  "chla.ug.cm2" = "Chlorophyll a (μg/cm²)",
  "cells.cm2" = "Symbiont cells (cells/cm²)",
  "calc.umol.cm2.hr" = "Calcification (μmol/cm²/hr)"
)

# Create plots for each parameter
physiology_plots <- list()

for (param in key_params) {
  plot_data <- physiology_clean %>%
    filter(!is.na(.data[[param]])) %>%
    group_by(species, timepoint) %>%
    summarise(
      mean_value = mean(.data[[param]], na.rm = TRUE),
      se_value = sd(.data[[param]], na.rm = TRUE) / sqrt(n()),
      .groups = "drop"
    ) %>%
    mutate(timepoint_num = as.numeric(str_extract(timepoint, "[1-4]")))

  if (nrow(plot_data) == 0) {
    physiology_plots[[param]] <- NULL
    next
  }

  physiology_plots[[param]] <- plot_ly(
    data = plot_data,
    x = ~timepoint_num,
    y = ~mean_value,
    color = ~species,
    type = "scatter",
    mode = "lines+markers",
    line = list(width = 3),
    marker = list(size = 10),
    error_y = list(array = ~se_value, color = 'rgba(0,0,0,0.3)'),
    name = ~species,
    hovertemplate = paste(
      "<b>%{fullData.name}</b><br>",
      "Timepoint: %{x}<br>",
      "Mean: %{y:.3f}<br>",
      "<extra></extra>"
    )
  ) %>%
    layout(
      title = param_labels[param],
      xaxis = list(title = "Timepoint", tickvals = 1:4, ticktext = paste0("TP", 1:4)),
      yaxis = list(title = param_labels[param]),
      showlegend = TRUE
    )
}

# Keep only non-null plots
valid_plots <- physiology_plots[!vapply(physiology_plots, is.null, logical(1))]

if (length(valid_plots) > 0) {
  # Build a responsive CSS grid to display plots in up to 2x2 layout
  grid_div <- htmltools::tags$div(
    class = "physiology-grid",
    lapply(names(valid_plots), function(nm) {
      htmltools::tags$div(
        class = "physiology-cell",
        htmltools::tags$h4(param_labels[nm]),
        valid_plots[[nm]]
      )
    })
  )
  # Inject lightweight CSS (scoped by class names to avoid site-wide impact)
  css <- htmltools::tags$style(HTML('
  .physiology-grid {display: grid; grid-template-columns: repeat(auto-fit, minmax(360px, 1fr)); gap: 1rem; align-items: start;}
  .physiology-cell {background: #f8f9fa; padding: 0.6rem 0.8rem; border: 1px solid #dee2e6; border-radius: 6px;}
  body.quarto-dark .physiology-cell {background: #1e1e1e; border-color: #444;}
  .physiology-cell h4 {margin-top: 0; font-size: 1.05rem;}
  '))
  htmltools::tagList(css, grid_div)
} else {
  htmltools::p("No physiology data available for plotting.")
}
```

## PCA Analysis

### Metabolomics PCA by Species

```{r}
#| echo: false
# Prepare data for PCA - wide format with compounds as columns
metabolomics_pca_data <- metabolomics_long %>%
  select(sample_id, compound, value, species, timepoint, colony_id) %>%
  pivot_wider(names_from = compound, values_from = value, values_fill = 0) %>%
  filter(!is.na(species))

# Extract numeric data for PCA
numeric_cols <- metabolomics_pca_data %>% 
  select(-sample_id, -species, -timepoint, -colony_id) %>%
  select(where(is.numeric))

# Perform PCA (remove any columns with zero variance)
zero_var_cols <- apply(numeric_cols, 2, var, na.rm = TRUE) == 0
if(any(zero_var_cols)) {
  numeric_cols <- numeric_cols[, !zero_var_cols]
}

if(ncol(numeric_cols) > 1) {
  pca_result <- prcomp(numeric_cols, scale. = TRUE, center = TRUE)
  
  # Create PCA plot data
  pca_plot_data <- data.frame(
    PC1 = pca_result$x[,1],
    PC2 = pca_result$x[,2],
    species = metabolomics_pca_data$species,
    timepoint = metabolomics_pca_data$timepoint,
    sample_id = metabolomics_pca_data$sample_id
  )
  
  # Calculate variance explained
  var_explained <- round(100 * pca_result$sdev^2 / sum(pca_result$sdev^2), 1)
  
  # Create interactive PCA plot
  p_metab_pca <- plot_ly(data = pca_plot_data,
                        x = ~PC1, y = ~PC2,
                        color = ~species,
                        text = ~paste("Sample:", sample_id, "<br>Timepoint:", timepoint),
                        type = "scatter", mode = "markers",
                        marker = list(size = 8)) %>%
    layout(
      title = "Metabolomics PCA by Species",
      xaxis = list(title = paste0("PC1 (", var_explained[1], "% variance)")),
      yaxis = list(title = paste0("PC2 (", var_explained[2], "% variance)")),
      hovermode = "closest"
    )
  
  p_metab_pca
} else {
  cat("Insufficient data for PCA analysis")
}
```

### Lipidomics PCA by Species

```{r}
#| echo: false
# Prepare data for PCA - wide format with lipids as columns
lipidomics_pca_data <- lipidomics_long %>%
  select(sample_id, lipid, value, species, timepoint, colony_id) %>%
  pivot_wider(names_from = lipid, values_from = value, values_fill = 0) %>%
  filter(!is.na(species))

# Extract numeric data for PCA
numeric_cols_lipid <- lipidomics_pca_data %>% 
  select(-sample_id, -species, -timepoint, -colony_id) %>%
  select(where(is.numeric))

# Perform PCA (remove any columns with zero variance)
zero_var_cols_lipid <- apply(numeric_cols_lipid, 2, var, na.rm = TRUE) == 0
if(any(zero_var_cols_lipid)) {
  numeric_cols_lipid <- numeric_cols_lipid[, !zero_var_cols_lipid]
}

if(ncol(numeric_cols_lipid) > 1) {
  pca_result_lipid <- prcomp(numeric_cols_lipid, scale. = TRUE, center = TRUE)
  
  # Create PCA plot data
  pca_plot_data_lipid <- data.frame(
    PC1 = pca_result_lipid$x[,1],
    PC2 = pca_result_lipid$x[,2],
    species = lipidomics_pca_data$species,
    timepoint = lipidomics_pca_data$timepoint,
    sample_id = lipidomics_pca_data$sample_id
  )
  
  # Calculate variance explained
  var_explained_lipid <- round(100 * pca_result_lipid$sdev^2 / sum(pca_result_lipid$sdev^2), 1)
  
  # Create interactive PCA plot
  p_lipid_pca <- plot_ly(data = pca_plot_data_lipid,
                        x = ~PC1, y = ~PC2,
                        color = ~species,
                        text = ~paste("Sample:", sample_id, "<br>Timepoint:", timepoint),
                        type = "scatter", mode = "markers",
                        marker = list(size = 8)) %>%
    layout(
      title = "Lipidomics PCA by Species",
      xaxis = list(title = paste0("PC1 (", var_explained_lipid[1], "% variance)")),
      yaxis = list(title = paste0("PC2 (", var_explained_lipid[2], "% variance)")),
      hovermode = "closest"
    )
  
  p_lipid_pca
} else {
  cat("Insufficient data for PCA analysis")
}
```

### Metabolomics PCA by Time (Species-specific)

```{r}
#| echo: false
if(exists("pca_result") && ncol(numeric_cols) > 1) {
  # Create separate plots for each species
  species_list <- unique(metabolomics_pca_data$species)
  
  metab_time_plots <- list()
  
  for(sp in species_list) {
    species_data <- pca_plot_data[pca_plot_data$species == sp, ]
    
    if(nrow(species_data) > 0) {
      metab_time_plots[[sp]] <- plot_ly(data = species_data,
                                       x = ~PC1, y = ~PC2,
                                       color = ~timepoint,
                                       text = ~paste("Sample:", sample_id, "<br>Species:", sp),
                                       type = "scatter", mode = "markers",
                                       marker = list(size = 8)) %>%
        layout(
          title = paste("Metabolomics PCA -", sp),
          xaxis = list(title = paste0("PC1 (", var_explained[1], "% variance)")),
          yaxis = list(title = paste0("PC2 (", var_explained[2], "% variance)")),
          hovermode = "closest"
        )
    }
  }
  
  # Display plots
  for(sp in names(metab_time_plots)) {
    print(metab_time_plots[[sp]])
  }
} else {
  cat("Insufficient metabolomics data for species-specific time PCA analysis")
}
```

### Lipidomics PCA by Time (Species-specific)

```{r}
#| echo: false
if(exists("pca_result_lipid") && ncol(numeric_cols_lipid) > 1) {
  # Create separate plots for each species
  species_list_lipid <- unique(lipidomics_pca_data$species)
  
  lipid_time_plots <- list()
  
  for(sp in species_list_lipid) {
    species_data_lipid <- pca_plot_data_lipid[pca_plot_data_lipid$species == sp, ]
    
    if(nrow(species_data_lipid) > 0) {
      lipid_time_plots[[sp]] <- plot_ly(data = species_data_lipid,
                                       x = ~PC1, y = ~PC2,
                                       color = ~timepoint,
                                       text = ~paste("Sample:", sample_id, "<br>Species:", sp),
                                       type = "scatter", mode = "markers",
                                       marker = list(size = 8)) %>%
        layout(
          title = paste("Lipidomics PCA -", sp),
          xaxis = list(title = paste0("PC1 (", var_explained_lipid[1], "% variance)")),
          yaxis = list(title = paste0("PC2 (", var_explained_lipid[2], "% variance)")),
          hovermode = "closest"
        )
    }
  }
  
  # Display plots
  for(sp in names(lipid_time_plots)) {
    print(lipid_time_plots[[sp]])
  }
} else {
  cat("Insufficient lipidomics data for species-specific time PCA analysis")
}
```

## Data Downloads

### Download Raw Data Files

- [Metabolomics Data (CSV)](https://raw.githubusercontent.com/urol-e5/timeseries_molecular/main/M-multi-species/output/metabolomics_count_matrix.csv){download="metabolomics_count_matrix.csv"}
- [Lipidomics Data (CSV)](https://raw.githubusercontent.com/urol-e5/timeseries_molecular/main/M-multi-species/output/lipid_count_matrix.csv){download="lipid_count_matrix.csv"}
- [Physiology Data (CSV)](https://raw.githubusercontent.com/urol-e5/timeseries/master/time_series_analysis/Output/master_timeseries.csv){download="master_timeseries.csv"}


```{r}
#| echo: false
cat("Data Overview:\n")
cat("- Metabolomics: ", nrow(metabolomics), " compounds across ", length(unique(metabolomics_long$sample_id)), " samples\n")
cat("- Lipidomics: ", nrow(lipidomics), " lipids across ", length(unique(lipidomics_long$sample_id)), " samples\n")
cat("- Physiology: ", nrow(physiology_clean), " measurements across ", length(unique(physiology_clean$colony_id)), " colonies\n")
cat("- Species: ", paste(unique(physiology_clean$species), collapse = ", "), "\n")
cat("- Timepoints: ", paste(sort(unique(physiology_clean$timepoint)), collapse = ", "), "\n")
```


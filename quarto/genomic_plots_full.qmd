---
title: "Comparative Genomic Plots"
description: "Circular and linear genome visualizations showing gene expression, DNA methylation, lncRNA, and miRNA data"
format:
  html:
    code-copy: true
    toc: true
    toc-location: right
    toc-expand: true
editor: visual
execute:
  echo: false
  warning: false
  message: false
---

```{r setup, include=FALSE}
# Load required packages
required_packages <- c("tidyverse", "DT", "readxl", "plotly", "readr", "dplyr", 
                       "tibble", "knitr", "gt", "htmltools", "ggplot2", 
                       "circlize", "RColorBrewer", "viridis", "scales")

# Function to safely load packages
safe_load_package <- function(pkg) {
  if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
    install.packages(pkg, dependencies = TRUE)
    library(pkg, character.only = TRUE)
  }
}

# Load all required packages
for (pkg in required_packages) {
  safe_load_package(pkg)
}
```

```{r data-config, cache=TRUE, include=FALSE}
# =============================================================================
# EXTERNAL DATA URLS CONFIGURATION
# =============================================================================
# All external URLs are centralized here for easy maintenance.

# Data URLs for genomic annotations and expression data
data_urls <- list(
  Apul = list(
    species_name = "Acropora pulchra",
    italic_name = "*Acropora pulchra*",
    gff = "https://raw.githubusercontent.com/urol-e5/MOSAiC/refs/heads/main/data/Apul/Apul_gene_only.gff",
    gene = "https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/02.20-D-Apul-RNAseq-alignment-HiSat2/apul-gene_count_matrix.csv",
    mirna = "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/refs/heads/main/M-multi-species/output/10-format-miRNA-counts/Apul_miRNA_counts_formatted.txt",
    lncRNA = "https://gannet.fish.washington.edu/v1_web/owlshell/bu-github/timeseries_molecular/D-Apul/output/31.5-Apul-lncRNA-discovery/lncRNA_counts.clean.filtered.txt",
    lncRNA_gtf = "https://gannet.fish.washington.edu/v1_web/owlshell/bu-github/timeseries_molecular/D-Apul/output/31-Apul-lncRNA-discovery/lncRNA.gtf",
    mCpG = "https://gannet.fish.washington.edu/metacarcinus/E5/20250821_meth_Apul/merged-WGBS-CpG-counts_filtered.csv"
  ),
  Peve = list(
    species_name = "Porites evermanni",
    italic_name = "*Porites evermanni*",
    gff = "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/refs/heads/main/E-Peve/output/00.01-Peve-gene-gff/Peve_gene_only.gff3",
    gene = "https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/E-Peve/output/02.20-E-Peve-RNAseq-alignment-HiSat2/peve-gene_count_matrix.csv",
    mirna = "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/refs/heads/main/M-multi-species/output/10-format-miRNA-counts/Peve_miRNA_counts_formatted.txt",
    lncRNA = "https://gannet.fish.washington.edu/v1_web/owlshell/bu-github/timeseries_molecular/E-Peve/output/12-Peve-lncRNA-discovery/lncRNA_counts.clean.filtered.txt",
    lncRNA_gtf = "https://gannet.fish.washington.edu/v1_web/owlshell/bu-github/timeseries_molecular/E-Peve/output/12-Peve-lncRNA-discovery/lncRNA.gtf",
    mCpG = "https://gannet.fish.washington.edu/metacarcinus/E5/Pevermanni/20250821_meth_Peve/merged-WGBS-CpG-counts_filtered.csv"
  ),
  Ptuh = list(
    species_name = "Pocillopora tuahiniensis",
    italic_name = "*Pocillopora tuahiniensis*",
    gff = "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/refs/heads/main/F-Ptua/output/00.01-Ptua-gene-gff/Pmea_gene_only.gff3",
    gene = "https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/F-Ptua/output/02.20-F-Ptua-RNAseq-alignment-HiSat2/ptua-gene_count_matrix.csv",
    mirna = "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/refs/heads/main/M-multi-species/output/10-format-miRNA-counts/Ptuh_miRNA_counts_formatted.txt",
    lncRNA = "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/refs/heads/main/F-Ptua/output/06-Ptua-lncRNA-discovery/lncRNA_counts.clean.filtered.txt",
    lncRNA_gtf = "https://raw.githubusercontent.com/urol-e5/timeseries_molecular/refs/heads/main/E-Peve/output/12-Peve-lncRNA-discovery/lncRNA.filtered.gtf",
    mCpG = "https://gannet.fish.washington.edu/metacarcinus/E5/Ptuahiniensis/20250821_meth_Ptua/merged-WGBS-CpG-counts_filtered.csv"
  )
)

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

# Function to validate URL
validate_url <- function(url) {
  if (is.null(url) || length(url) == 0 || !is.character(url)) {
    return(FALSE)
  }
  if (grepl("^https?://", url)) {
    return(TRUE)
  }
  return(FALSE)
}

# Function to safely load data with error handling
load_data_file <- function(url, data_type, species_code) {
  if (!validate_url(url)) {
    warning(paste("Invalid URL for", data_type, "data in", species_code))
    return(NULL)
  }
  
  tryCatch({
    if (data_type == "gff" || data_type == "lncRNA_gtf") {
      # For GFF/GTF files, use standard column names
      data <- read_delim(url, delim = "\t", col_names = c(
        "seqid", "source", "type", "start", "end", 
        "score", "strand", "phase", "attributes"
      ), comment = "#", show_col_types = FALSE)
    } else {
      # For count matrices and other files, read normally
      data <- read_delim(url, show_col_types = FALSE)
    }
    
    if (nrow(data) == 0) {
      warning(paste("Empty data loaded for", data_type, "in", species_code))
      return(NULL)
    }
    return(data)
  }, error = function(e) {
    warning(paste("Error loading", data_type, "data for", species_code, ":", e$message))
    return(NULL)
  })
}

# Function to safely get row count
safe_nrow <- function(data) {
  if (is.null(data)) return(0)
  return(nrow(data))
}

# Function to calculate mean expression across samples
calculate_mean_expression <- function(data) {
  if (is.null(data) || nrow(data) == 0) return(NULL)
  
  # Find numeric columns (exclude first column which is usually gene ID)
  numeric_cols <- sapply(data[-1], is.numeric)
  if (sum(numeric_cols) == 0) return(NULL)
  
  data$mean_expression <- rowMeans(data[numeric_cols], na.rm = TRUE)
  return(data)
}
```

```{r load-data, cache=TRUE, include=FALSE}
# =============================================================================
# DATA LOADING
# =============================================================================

# Initialize data storage
genomic_data <- list()

# Load data for each species
for (species_code in names(data_urls)) {
  cat("Loading data for", species_code, "...\n")
  
  species_data <- list()
  species_info <- data_urls[[species_code]]
  
  # Load genomic annotations (GFF)
  species_data$gff <- load_data_file(species_info$gff, "gff", species_code)
  
  # Load gene expression data
  species_data$gene <- load_data_file(species_info$gene, "gene", species_code)
  if (!is.null(species_data$gene)) {
    species_data$gene <- calculate_mean_expression(species_data$gene)
  }
  
  # Load miRNA data
  species_data$mirna <- load_data_file(species_info$mirna, "mirna", species_code)
  if (!is.null(species_data$mirna)) {
    species_data$mirna <- calculate_mean_expression(species_data$mirna)
  }
  
  # Load lncRNA data
  species_data$lncRNA <- load_data_file(species_info$lncRNA, "lncRNA", species_code)
  if (!is.null(species_data$lncRNA)) {
    species_data$lncRNA <- calculate_mean_expression(species_data$lncRNA)
  }
  
  # Load lncRNA annotations
  species_data$lncRNA_gtf <- load_data_file(species_info$lncRNA_gtf, "lncRNA_gtf", species_code)
  
  # Load methylation data
  species_data$mCpG <- load_data_file(species_info$mCpG, "mCpG", species_code)
  if (!is.null(species_data$mCpG)) {
    species_data$mCpG <- calculate_mean_expression(species_data$mCpG)
  }
  
  genomic_data[[species_code]] <- species_data
}
```

# Comparative Genomic Analysis

This page presents comparative genomic visualizations for three coral species showing the distribution and expression levels of genes, lncRNAs, miRNAs, and DNA methylation patterns across their genomes.

## Species Overview

```{r species-summary}
# Create summary table
species_summary <- data.frame(
  Species = character(),
  Genes = integer(),
  lncRNAs = integer(),
  miRNAs = integer(),
  mCpG_Sites = integer(),
  stringsAsFactors = FALSE
)

for (species_code in names(data_urls)) {
  species_info <- data_urls[[species_code]]
  species_data <- genomic_data[[species_code]]
  
  species_summary <- rbind(species_summary, data.frame(
    Species = species_info$italic_name,
    Genes = safe_nrow(species_data$gff),
    lncRNAs = safe_nrow(species_data$lncRNA_gtf),
    miRNAs = safe_nrow(species_data$mirna),
    mCpG_Sites = safe_nrow(species_data$mCpG),
    stringsAsFactors = FALSE
  ))
}

# Display table
species_summary %>%
  gt() %>%
  tab_header(
    title = "Genomic Feature Counts by Species",
    subtitle = "Summary of available genomic data for comparative analysis"
  ) %>%
  fmt_number(columns = c("Genes", "lncRNAs", "miRNAs", "mCpG_Sites"), 
             decimals = 0, use_seps = TRUE) %>%
  cols_align(align = "center", columns = c("Genes", "lncRNAs", "miRNAs", "mCpG_Sites")) %>%
  tab_style(
    style = cell_text(style = "italic"),
    locations = cells_body(columns = Species)
  )
```

## Linear Genome Plots

The following plots show the distribution of genomic features along the largest contigs/chromosomes for each species.

```{r linear-plots, fig.width=12, fig.height=8}
# Function to create linear genome plot for a species
create_linear_plot <- function(species_code, max_contigs = 5) {
  species_data <- genomic_data[[species_code]]
  species_info <- data_urls[[species_code]]
  
  if (is.null(species_data$gff) || nrow(species_data$gff) == 0) {
    return(ggplot() + 
           ggtitle(paste("No data available for", species_info$italic_name)) +
           theme_void())
  }
  
  # Get the largest contigs
  contig_sizes <- species_data$gff %>%
    group_by(seqid) %>%
    summarise(max_pos = max(end, na.rm = TRUE), 
              feature_count = n(), 
              .groups = 'drop') %>%
    arrange(desc(max_pos)) %>%
    slice_head(n = max_contigs)
  
  # Filter data to largest contigs
  plot_data <- species_data$gff %>%
    filter(seqid %in% contig_sizes$seqid) %>%
    mutate(
      seqid = factor(seqid, levels = contig_sizes$seqid),
      feature_type = case_when(
        type == "gene" ~ "Gene",
        type == "mRNA" ~ "Gene",
        type == "CDS" ~ "Gene",
        str_detect(type, "RNA") ~ "RNA",
        TRUE ~ "Other"
      )
    )
  
  # Create the plot
  p <- ggplot(plot_data, aes(x = start/1000, xend = end/1000, y = seqid, yend = seqid)) +
    geom_segment(aes(color = feature_type), size = 0.5, alpha = 0.7) +
    facet_wrap(~seqid, scales = "free_x", ncol = 1, strip.position = "left") +
    scale_color_brewer(type = "qual", palette = "Set2", name = "Feature Type") +
    labs(
      title = paste("Linear Genome View:", species_info$italic_name),
      subtitle = paste("Top", max_contigs, "largest contigs showing genomic features"),
      x = "Position (kb)",
      y = "Contig/Chromosome"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(face = "bold", size = 14),
      plot.subtitle = element_text(size = 12),
      strip.text = element_text(size = 10),
      legend.position = "bottom",
      axis.text.y = element_text(size = 8),
      panel.grid.minor = element_blank()
    )
  
  return(p)
}

# Generate plots for each species
for (species_code in names(data_urls)) {
  p <- create_linear_plot(species_code)
  print(p)
  cat("\n\n")
}
```

## Circular Genome Plots

These circular plots provide a comprehensive view of genomic features arranged around the genome circumference.

```{r circular-plots, fig.width=10, fig.height=10}
# Function to create circular genome plot
create_circular_plot <- function(species_code, max_contigs = 10) {
  species_data <- genomic_data[[species_code]]
  species_info <- data_urls[[species_code]]
  
  if (is.null(species_data$gff) || nrow(species_data$gff) == 0) {
    # Create empty plot with message
    plot.new()
    text(0.5, 0.5, paste("No data available for\n", species_info$italic_name), 
         cex = 1.5, adj = 0.5)
    return(invisible())
  }
  
  # Prepare data for circular plot
  contig_data <- species_data$gff %>%
    group_by(seqid) %>%
    summarise(
      max_pos = max(end, na.rm = TRUE),
      feature_count = n(),
      .groups = 'drop'
    ) %>%
    arrange(desc(max_pos)) %>%
    slice_head(n = max_contigs) %>%
    mutate(
      start_cumulative = lag(cumsum(max_pos), default = 0),
      end_cumulative = cumsum(max_pos)
    )
  
  # Filter genomic features to selected contigs
  features <- species_data$gff %>%
    filter(seqid %in% contig_data$seqid) %>%
    left_join(contig_data, by = "seqid") %>%
    mutate(
      start_adj = start_cumulative + start,
      end_adj = start_cumulative + end,
      feature_type = case_when(
        type == "gene" ~ "Gene",
        type == "mRNA" ~ "Gene", 
        type == "CDS" ~ "Gene",
        str_detect(type, "RNA") ~ "RNA",
        TRUE ~ "Other"
      )
    ) %>%
    filter(!is.na(start_adj), !is.na(end_adj))
  
  if (nrow(features) == 0) {
    plot.new()
    text(0.5, 0.5, paste("No features to plot for\n", species_info$italic_name), 
         cex = 1.5, adj = 0.5)
    return(invisible())
  }
  
  # Set up circular plot
  circos.clear()
  circos.par(start.degree = 90, gap.degree = 2)
  
  # Initialize circular plot with contigs
  circos.initialize(
    factors = contig_data$seqid,
    xlim = data.frame(
      start = rep(0, nrow(contig_data)),
      end = contig_data$max_pos
    )
  )
  
  # Add basic track for contig names
  circos.track(
    factors = contig_data$seqid,
    ylim = c(0, 1),
    panel.fun = function(x, y) {
      sector.name = get.cell.meta.data("sector.index")
      circos.text(
        mean(get.cell.meta.data("xlim")), 
        0.5, 
        sector.name, 
        cex = 0.8, 
        niceFacing = TRUE
      )
    },
    track.height = 0.1,
    bg.border = NA
  )
  
  # Add gene features track
  gene_features <- features %>% filter(feature_type == "Gene")
  if (nrow(gene_features) > 0) {
    circos.track(
      factors = gene_features$seqid,
      ylim = c(0, 1),
      panel.fun = function(x, y) {
        sector_data <- gene_features[gene_features$seqid == get.cell.meta.data("sector.index"), ]
        if (nrow(sector_data) > 0) {
          circos.rect(
            xleft = sector_data$start,
            xright = sector_data$end,
            ybottom = 0.3,
            ytop = 0.7,
            col = "#1f77b4",
            border = NA
          )
        }
      },
      track.height = 0.15,
      bg.border = NA
    )
  }
  
  # Add RNA features track
  rna_features <- features %>% filter(feature_type == "RNA")
  if (nrow(rna_features) > 0) {
    circos.track(
      factors = rna_features$seqid,
      ylim = c(0, 1),
      panel.fun = function(x, y) {
        sector_data <- rna_features[rna_features$seqid == get.cell.meta.data("sector.index"), ]
        if (nrow(sector_data) > 0) {
          circos.rect(
            xleft = sector_data$start,
            xright = sector_data$end,
            ybottom = 0.3,
            ytop = 0.7,
            col = "#ff7f0e",
            border = NA
          )
        }
      },
      track.height = 0.15,
      bg.border = NA
    )
  }
  
  # Add title
  title(main = paste("Circular Genome View:", species_info$italic_name), 
        cex.main = 1.2, font.main = 2)
  
  # Add legend
  legend("bottomright", 
         legend = c("Genes", "RNAs"), 
         fill = c("#1f77b4", "#ff7f0e"),
         cex = 0.8,
         bty = "n")
}

# Generate circular plots for each species
for (species_code in names(data_urls)) {
  par(mar = c(1, 1, 3, 1))
  create_circular_plot(species_code)
  cat("\n\n")
}
```

## Expression Heatmaps

These heatmaps show the relative expression levels of different genomic features across samples.

```{r expression-heatmaps, fig.width=12, fig.height=8}
# Function to create expression heatmap
create_expression_heatmap <- function(species_code, feature_type = "gene") {
  species_data <- genomic_data[[species_code]]
  species_info <- data_urls[[species_code]]
  
  # Get the appropriate data
  data <- switch(feature_type,
    "gene" = species_data$gene,
    "mirna" = species_data$mirna,
    "lncRNA" = species_data$lncRNA,
    "mCpG" = species_data$mCpG
  )
  
  if (is.null(data) || nrow(data) == 0) {
    return(ggplot() + 
           ggtitle(paste("No", feature_type, "data for", species_info$italic_name)) +
           theme_void())
  }
  
  # Prepare data for heatmap (top 50 most variable features)
  numeric_cols <- sapply(data[-1], is.numeric)
  if (sum(numeric_cols) < 2) {
    return(ggplot() + 
           ggtitle(paste("Insufficient samples for", feature_type, "in", species_info$italic_name)) +
           theme_void())
  }
  
  expr_data <- data[numeric_cols]
  
  # Calculate variance and select top features
  var_scores <- apply(expr_data, 1, var, na.rm = TRUE)
  top_indices <- order(var_scores, decreasing = TRUE)[1:min(50, nrow(expr_data))]
  
  heatmap_data <- expr_data[top_indices, ] %>%
    scale() %>%
    as.data.frame() %>%
    mutate(feature_id = paste0(feature_type, "_", 1:nrow(.))) %>%
    pivot_longer(cols = -feature_id, names_to = "sample", values_to = "expression")
  
  # Create heatmap
  p <- ggplot(heatmap_data, aes(x = sample, y = feature_id, fill = expression)) +
    geom_tile() +
    scale_fill_gradient2(low = "blue", mid = "white", high = "red", 
                        midpoint = 0, name = "Z-score") +
    labs(
      title = paste(stringr::str_to_title(feature_type), "Expression Heatmap:", species_info$italic_name),
      subtitle = paste("Top 50 most variable", feature_type, "features"),
      x = "Samples",
      y = "Features"
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
      axis.text.y = element_blank(),
      axis.ticks.y = element_blank(),
      plot.title = element_text(face = "bold"),
      panel.grid = element_blank()
    )
  
  return(p)
}

# Generate heatmaps for each species and feature type
feature_types <- c("gene", "mirna", "lncRNA", "mCpG")

for (species_code in names(data_urls)) {
  for (ft in feature_types) {
    p <- create_expression_heatmap(species_code, ft)
    print(p)
    cat("\n\n")
  }
}
```

## Data Availability and Methods

### Data Sources

All genomic data used in these visualizations are sourced from the MOSAiC project repositories:

- **Gene annotations**: GFF3 files containing gene models and annotations
- **Gene expression**: RNA-seq count matrices processed through HISAT2/StringTie pipeline
- **miRNA data**: Small RNA-seq counts from ShortStack analysis
- **lncRNA data**: Long non-coding RNA counts from StringTie/gffcompare pipeline
- **DNA methylation**: EM-seq CpG methylation data from Bismark analysis

### Visualization Methods

- **Linear plots**: Show genomic features along chromosomes/contigs using ggplot2
- **Circular plots**: Circular genome representations using the circlize package
- **Expression heatmaps**: Z-score normalized expression patterns across samples

### Data Processing Notes

- Only the largest contigs are displayed to focus on major genomic scaffolds
- Expression data shows mean values across all available samples
- Missing or unavailable data is indicated in the plots
- All plots are interactive where possible for detailed exploration

---

*Generated on `r Sys.Date()` using R `r R.version.string`*